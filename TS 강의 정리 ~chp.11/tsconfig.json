// {
//   "compilerOptions": {
//     /* Visit https://aka.ms/tsconfig to read more about this file */

//     /* Projects */
//     // "incremental": true,                              /* Save .tsbuildinfo files to allow for incremental compilation of projects. */
//     // "composite": true,                                /* Enable constraints that allow a TypeScript project to be used with project references. */
//     // "tsBuildInfoFile": "./.tsbuildinfo",              /* Specify the path to .tsbuildinfo incremental compilation file. */
//     // "disableSourceOfProjectReferenceRedirect": true,  /* Disable preferring source files instead of declaration files when referencing composite projects. */
//     // "disableSolutionSearching": true,                 /* Opt a project out of multi-project reference checking when editing. */
//     // "disableReferencedProjectLoad": true,             /* Reduce the number of projects loaded automatically by TypeScript. */

//     /* Language and Environment */
//     "target": "es6", // 컴파일된 코드를 지원하는 브라우저 정의
//     /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */
//     "lib": ["dom", "es6", "DOM.Iterable", "ScriptHost"], // lib이 주석 처리 되어 있으면 js의 기본 기능 사용
//     /* Specify a set of bundled library declaration files that describe the target runtime environment. */
//     // "jsx": "preserve",                                /* Specify what JSX code is generated. */
//     "experimentalDecorators": true /* Enable experimental support for legacy experimental decorators. */,
//     // "emitDecoratorMetadata": true,                    /* Emit design-type metadata for decorated declarations in source files. */
//     // "jsxFactory": "",                                 /* Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'. */
//     // "jsxFragmentFactory": "",                         /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */
//     // "jsxImportSource": "",                            /* Specify module specifier used to import the JSX factory functions when using 'jsx: react-jsx*'. */
//     // "reactNamespace": "",                             /* Specify the object invoked for 'createElement'. This only applies when targeting 'react' JSX emit. */
//     // "noLib": true,                                    /* Disable including any library files, including the default lib.d.ts. */
//     // "useDefineForClassFields": true,                  /* Emit ECMAScript-standard-compliant class fields. */
//     // "moduleDetection": "auto",                        /* Control what method is used to detect module-format JS files. */

//     /* Modules */
//     "module": "commonjs" /* Specify what module code is generated. */,
//     "rootDir": "./src", // 입력 파일이 어느 경로에 저장될지 결정
//     /* Specify the root folder within your source files. */
//     // "moduleResolution": "node10",                     /* Specify how TypeScript looks up a file from a given module specifier. */
//     // "baseUrl": "./",                                  /* Specify the base directory to resolve non-relative module names. */
//     // "paths": {},                                      /* Specify a set of entries that re-map imports to additional lookup locations. */
//     // "rootDirs": [],                                   /* Allow multiple folders to be treated as one when resolving modules. */
//     // "typeRoots": [],                                  /* Specify multiple folders that act like './node_modules/@types'. */
//     // "types": [],                                      /* Specify type package names to be included without being referenced in a source file. */
//     // "allowUmdGlobalAccess": true,                     /* Allow accessing UMD globals from modules. */
//     // "moduleSuffixes": [],                             /* List of file name suffixes to search when resolving a module. */
//     // "allowImportingTsExtensions": true,               /* Allow imports to include TypeScript file extensions. Requires '--moduleResolution bundler' and either '--noEmit' or '--emitDeclarationOnly' to be set. */
//     // "resolvePackageJsonExports": true,                /* Use the package.json 'exports' field when resolving package imports. */
//     // "resolvePackageJsonImports": true,                /* Use the package.json 'imports' field when resolving imports. */
//     // "customConditions": [],                           /* Conditions to set in addition to the resolver-specific defaults when resolving imports. */
//     // "resolveJsonModule": true,                        /* Enable importing .json files. */
//     // "allowArbitraryExtensions": true,                 /* Enable importing files with any extension, provided a declaration file is present. */
//     // "noResolve": true,                                /* Disallow 'import's, 'require's or '<reference>'s from expanding the number of files TypeScript should add to a project. */

//     /* JavaScript Support */
//     // "allowJs": true,                                  /* Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files. */
//     // "checkJs": true,                                  /* Enable error reporting in type-checked JavaScript files. */
//     // "maxNodeModuleJsDepth": 1,                        /* Specify the maximum folder depth used for checking JavaScript files from 'node_modules'. Only applicable with 'allowJs'. */

//     /* Emit */
//     // "declaration": true,                              /* Generate .d.ts files from TypeScript and JavaScript files in your project. */
//     // "declarationMap": true,                           /* Create sourcemaps for d.ts files. */
//     // "emitDeclarationOnly": true,                      /* Only output d.ts files and not JavaScript files. */
//     "sourceMap": true, // true로 설정하면 브라우저의 source 탭에서 ts 파일을 볼 수 있음
//     /* Create source map files for emitted JavaScript files. */
//     // "inlineSourceMap": true,                          /* Include sourcemap files inside the emitted JavaScript. */
//     "outFile": "./dist/bundle" /* Specify a file that bundles all outputs into one JavaScript file. If 'declaration' is true, also designates a file that bundles all .d.ts output. */,
//     "outDir": "./dist", // 출력 파일이 어느 경로에 저장될지 결정
//     /* Specify an output folder for all emitted files. */
//     "removeComments": true /* Disable emitting comments. */,
//     // "noEmit": true,                                   /* Disable emitting files from a compilation. */
//     // "importHelpers": true,                            /* Allow importing helper functions from tslib once per project, instead of including them per-file. */
//     // "downlevelIteration": true,                       /* Emit more compliant, but verbose and less performant JavaScript for iteration. */
//     // "sourceRoot": "",                                 /* Specify the root path for debuggers to find the reference source code. */
//     // "mapRoot": "",                                    /* Specify the location where debugger should locate map files instead of generated locations. */
//     // "inlineSources": true,                            /* Include source code in the sourcemaps inside the emitted JavaScript. */
//     // "emitBOM": true,                                  /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */
//     // "newLine": "crlf",                                /* Set the newline character for emitting files. */
//     // "stripInternal": true,                            /* Disable emitting declarations that have '@internal' in their JSDoc comments. */
//     // "noEmitHelpers": true,                            /* Disable generating custom helper functions like '__extends' in compiled output. */
//     // "noEmitOnError": true,     // 문제가 있는 ts파일의 js파일을 생성하지 않음
//     /* Disable emitting files if any type checking errors are reported. */
//     // "preserveConstEnums": true,                       /* Disable erasing 'const enum' declarations in generated code. */
//     // "declarationDir": "./",                           /* Specify the output directory for generated declaration files. */

//     /* Interop Constraints */
//     // "isolatedModules": true,                          /* Ensure that each file can be safely transpiled without relying on other imports. */
//     // "verbatimModuleSyntax": true,                     /* Do not transform or elide any imports or exports not marked as type-only, ensuring they are written in the output file's format based on the 'module' setting. */
//     // "isolatedDeclarations": true,                     /* Require sufficient annotation on exports so other tools can trivially generate declaration files. */
//     // "allowSyntheticDefaultImports": true,             /* Allow 'import x from y' when a module doesn't have a default export. */
//     "esModuleInterop": true /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */,
//     // "preserveSymlinks": true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */
//     "forceConsistentCasingInFileNames": true /* Ensure that casing is correct in imports. */,

//     /* Type Checking */
//     "strict": true /* Enable all strict type-checking options. */,
//     // "noImplicitAny": true,                            /* Enable error reporting for expressions and declarations with an implied 'any' type. */
//     // "strictNullChecks": true,                         /* When type checking, take into account 'null' and 'undefined'. */
//     // "strictFunctionTypes": true,                      /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */
//     // "strictBindCallApply": true,                      /* Check that the arguments for 'bind', 'call', and 'apply' methods match the original function. */
//     // "strictPropertyInitialization": true,             /* Check for class properties that are declared but not set in the constructor. */
//     // "noImplicitThis": true,                           /* Enable error reporting when 'this' is given the type 'any'. */
//     // "useUnknownInCatchVariables": true,               /* Default catch clause variables as 'unknown' instead of 'any'. */
//     // "alwaysStrict": true,                             /* Ensure 'use strict' is always emitted. */
//     // "noUnusedLocals": true,   //                        /* Enable error reporting when local variables aren't read. */
//     // "noUnusedParameters": true,  //                     /* Raise an error when a function parameter isn't read. */
//     // "exactOptionalPropertyTypes": true,               /* Interpret optional property types as written, rather than adding 'undefined'. */
//     // "noImplicitReturns": true,                        /* Enable error reporting for codepaths that do not explicitly return in a function. */
//     // "noFallthroughCasesInSwitch": true,               /* Enable error reporting for fallthrough cases in switch statements. */
//     // "noUncheckedIndexedAccess": true,                 /* Add 'undefined' to a type when accessed using an index. */
//     // "noImplicitOverride": true,                       /* Ensure overriding members in derived classes are marked with an override modifier. */
//     // "noPropertyAccessFromIndexSignature": true,       /* Enforces using indexed accessors for keys declared using an indexed type. */
//     // "allowUnusedLabels": true,                        /* Disable error reporting for unused labels. */
//     // "allowUnreachableCode": true,                     /* Disable error reporting for unreachable code. */

//     /* Completeness */
//     // "skipDefaultLibCheck": true,                      /* Skip type checking .d.ts files that are included with TypeScript. */
//     "skipLibCheck": true /* Skip type checking all .d.ts files. */
//   },
//   "exclude": ["node_modules"] // 컴파일 시 노드 모듈 파일 제외한다는 의미, default로 제외되긴 함
// }

{
  "compilerOptions": {
    /* Basic Options */
    "target": "es6" /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017','ES2018' or 'ESNEXT'. */,
    "module": "es2015" /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', or 'ESNext'. */,
    "lib": [
      "dom",
      "es6",
      "dom.iterable",
      "scripthost"
    ] /* Specify library files to be included in the compilation. */,
    // "allowJs": true,                       /* Allow javascript files to be compiled. */
    // "checkJs": true,                       /* Report errors in .js files. */
    // "jsx": "preserve",                     /* Specify JSX code generation: 'preserve', 'react-native', or 'react'. */
    // "declaration": true,                   /* Generates corresponding '.d.ts' file. */
    // "declarationMap": true,                /* Generates a sourcemap for each corresponding '.d.ts' file. */
    "sourceMap": true /* Generates corresponding '.map' file. */,
    // "outFile": "./dist/bundle.js" /* Concatenate and emit output to single file. */,
    "outDir": "./dist" /* Redirect output structure to the directory. */,
    // "rootDir": "./src" /* Specify the root directory of input files. Use to control the output directory structure with --outDir. */,
    // "composite": true,                     /* Enable project compilation */
    "removeComments": true /* Do not emit comments to output. */,
    // "noEmit": true,                        /* Do not emit outputs. */
    // "importHelpers": true,                 /* Import emit helpers from 'tslib'. */
    // "downlevelIteration": true,            /* Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. */
    // "isolatedModules": true,               /* Transpile each file as a separate module (similar to 'ts.transpileModule'). */
    "noEmitOnError": true,

    /* Strict Type-Checking Options */
    "strict": true /* Enable all strict type-checking options. */,
    // "noImplicitAny": false,                 /* Raise error on expressions and declarations with an implied 'any' type. */
    // "strictNullChecks": true,              /* Enable strict null checks. */
    // "strictFunctionTypes": true,           /* Enable strict checking of function types. */
    // "strictBindCallApply": true,           /* Enable strict 'bind', 'call', and 'apply' methods on functions. */
    // "strictPropertyInitialization": true,  /* Enable strict checking of property initialization in classes. */
    // "noImplicitThis": true,                /* Raise error on 'this' expressions with an implied 'any' type. */
    // "alwaysStrict": true,                  /* Parse in strict mode and emit "use strict" for each source file. */

    /* Additional Checks */
    "noUnusedLocals": true /* Report errors on unused locals. */,
    "noUnusedParameters": true /* Report errors on unused parameters. */,
    "noImplicitReturns": true /* Report error when not all code paths in function return a value. */,
    // "noFallthroughCasesInSwitch": true,    /* Report errors for fallthrough cases in switch statement. */

    /* Module Resolution Options */
    // "moduleResolution": "node",            /* Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */
    // "baseUrl": "./",                       /* Base directory to resolve non-absolute module names. */
    // "paths": {},                           /* A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. */
    // "rootDirs": [],                        /* List of root folders whose combined content represents the structure of the project at runtime. */
    // "typeRoots": [],                       /* List of folders to include type definitions from. */
    // "types": [],                           /* Type declaration files to be included in compilation. */
    // "allowSyntheticDefaultImports": true,  /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */
    "esModuleInterop": true /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */,
    // "preserveSymlinks": true,              /* Do not resolve the real path of symlinks. */

    /* Source Map Options */
    // "sourceRoot": "",                      /* Specify the location where debugger should locate TypeScript files instead of source locations. */
    // "mapRoot": "",                         /* Specify the location where debugger should locate map files instead of generated locations. */
    // "inlineSourceMap": true,               /* Emit a single file with source maps instead of having a separate file. */
    // "inlineSources": true,                 /* Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. */

    /* Experimental Options */
    "experimentalDecorators": true /* Enables experimental support for ES7 decorators. */
    // "emitDecoratorMetadata": true,         /* Enables experimental support for emitting type metadata for decorators. */
  },
  "exclude": [
    "node_modules" // would be the default
  ]
}
